[workspace]
members = [
    "core",
    "engine",
    "content",
    "analytics",
    "cli",
    "persistence",
    "platform",
    "centotype-bin"
]
resolver = "2"


[workspace.package]
version = "1.0.0"
edition = "2021"
rust-version = "1.75.0"
authors = ["Centotype Team <contact@centotype.dev>"]
license = "MIT"
repository = "https://github.com/rfxlamia/centotype"
homepage = "https://centotype.dev"
description = "CLI-based typing trainer with 100 progressive difficulty levels"
keywords = ["typing", "cli", "trainer", "practice", "wpm"]
categories = ["command-line-utilities", "games", "education"]

[workspace.dependencies]
# Core dependencies
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1.0", features = ["rt", "time", "macros"] }
chrono = { version = "0.4", features = ["serde"] }
uuid = { version = "1.0", features = ["v4", "serde"] }
thiserror = "1.0"
anyhow = "1.0"

# Terminal/CLI dependencies
crossterm = "0.27"
clap = { version = "4.0", features = ["derive", "env"] }
ratatui = "0.24"

# Performance and async
rayon = "1.8"
parking_lot = "0.12"
once_cell = "1.19"

# Utilities
indexmap = "2.0"
regex = "1.10"
unicode-segmentation = "1.10"
unicode-width = "0.1"

# Configuration and persistence
toml = "0.8"
dirs = "5.0"
memmap2 = "0.9"

# Testing and benchmarking
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# Internal workspace crates
centotype-core = { path = "core" }
centotype-engine = { path = "engine" }
centotype-content = { path = "content" }
centotype-analytics = { path = "analytics" }
centotype-cli = { path = "cli" }
centotype-persistence = { path = "persistence" }
centotype-platform = { path = "platform" }

[profile.release]
lto = "thin"
codegen-units = 1
panic = "abort"
strip = true

[profile.bench]
debug = true

# Performance targets validation profile
[profile.perf-test]
inherits = "release"
debug = true
strip = false

# Clippy lints for panic safety and code quality
[workspace.lints.clippy]
# CRITICAL: Block panic-prone patterns
unwrap_used = "deny"                    # Block all .unwrap() usage
expect_used = "warn"                    # Require justification for .expect()
panic = "deny"                          # Block panic! in production
indexing_slicing = "warn"               # Require bounds checking
unnecessary_unwrap = "deny"             # Block redundant unwraps

# HIGH PRIORITY: Error handling
missing_errors_doc = "warn"             # Document error conditions
missing_panics_doc = "warn"             # Document panic conditions
result_large_err = "warn"               # Optimize error types

# PERFORMANCE: Critical path optimizations
needless_collect = "warn"               # Avoid unnecessary collections
single_char_pattern = "warn"            # Use char instead of string
inefficient_to_string = "warn"          # Use more efficient conversions

# SECURITY: Input validation
suspicious_else_formatting = "deny"     # Prevent logic errors
float_cmp = "warn"                      # Safe float comparisons

# CODE QUALITY: Maintainability
too_many_arguments = "warn"             # Limit function complexity
cognitive_complexity = "warn"           # Limit cognitive load
missing_const_for_fn = "warn"           # Performance optimization

[workspace.lints.rust]
unsafe_code = "forbid"                  # No unsafe code in this project
missing_docs = "warn"                   # Require documentation
dead_code = "warn"                      # Remove unused code

