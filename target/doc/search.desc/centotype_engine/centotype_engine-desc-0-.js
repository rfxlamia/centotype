searchState.loadedDescShard("centotype_engine", 0, "Centotype Engine\nMain engine coordinator that manages all subsystems\nEmergency shutdown - restore terminal state immediately\nEvent loop with high-performance input processing and &lt;…\nReturns the argument unchanged.\nInput handler with security sanitization and escape …\nCalls <code>U::from(self)</code>.\nperformance stub implementation\nrender stub implementation\nStart the main engine loop - stub implementation\ntty stub implementation\nEngine events processed by the event loop\nHigh-performance event loop with latency tracking\nEvent loop performance metrics\nPerformance tracking for event processing\nRender commands for the render loop\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet performance metrics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if performance targets are met\nStart the main event loop with performance monitoring\nEmergency stop the event loop\nAllowed character configuration based on training mode\nEscape sequence filter to prevent terminal manipulation\nSecure input processor with sanitization and validation\nInput processing statistics\nType of processed input\nProcessed input result\nRate limiter to prevent input flooding attacks\nRate limiter statistics\nSecurity flags for input validation\nSecurity policy configuration\nCheck input length limits to prevent buffer overflow …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet input processing statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcess and sanitize keyboard input with security …\nSanitize text input against injection attacks\nUpdate allowed character set based on training mode\nValidate that input contains only allowed characters\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")