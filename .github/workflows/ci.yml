name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds to catch regressions
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1
  # Performance testing environment
  CENTOTYPE_TEST_MODE: 1
  CENTOTYPE_PERF_THRESHOLD_INPUT_LATENCY_P99: 25
  CENTOTYPE_PERF_THRESHOLD_STARTUP_P95: 200
  CENTOTYPE_PERF_THRESHOLD_RENDER_P95: 33
  CENTOTYPE_PERF_THRESHOLD_MEMORY_RSS: 52428800  # 50MB in bytes

jobs:
  # Fast feedback: lint and basic tests
  check:
    name: Check & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: check-${{ runner.os }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --workspace --no-deps --document-private-items

  # Security and vulnerability scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run security audit
        run: cargo audit

      - name: Run dependency checks
        run: cargo deny check

      - name: Run input fuzzing tests
        run: cargo test --package centotype-engine --test fuzz_input -- --ignored

  # Cross-platform build matrix
  build:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [check]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
            cross: true

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-12
            cross: false
          - target: aarch64-apple-darwin
            os: macos-12
            cross: false

          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-2022
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build workspace (native)
        if: '!matrix.cross'
        run: cargo build --release --target ${{ matrix.target }} --workspace

      - name: Build workspace (cross)
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }} --workspace

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: centotype-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/centotype*
            !target/${{ matrix.target }}/release/*.d
            !target/${{ matrix.target }}/release/deps/
          retention-days: 30

  # Comprehensive testing on primary platforms
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    needs: [check]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}

      - name: Install test dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev

      - name: Run unit tests
        run: cargo test --workspace --lib

      - name: Run integration tests
        run: cargo test --workspace --test '*'

      - name: Run documentation tests
        run: cargo test --workspace --doc

      - name: Generate test coverage
        if: matrix.os == 'ubuntu-20.04'
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --workspace --out xml --output-dir coverage/

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-20.04'
        uses: codecov/codecov-action@v3
        with:
          files: coverage/cobertura.xml
          fail_ci_if_error: false

  # Performance benchmarks and validation
  performance:
    name: Performance Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs: [check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: perf-ubuntu

      - name: Install performance test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev valgrind

      - name: Build performance test binary
        run: cargo build --profile perf-test --bin centotype

      - name: Run benchmark suite
        run: cargo bench --workspace

      - name: Run performance validation tests
        run: cargo test --package centotype-engine --test performance_validation -- --ignored

      - name: Run memory usage tests
        run: cargo test --package centotype-engine --test memory_validation -- --ignored

      - name: Run startup time benchmarks
        run: ./scripts/benchmark_startup.sh

      - name: Run input latency benchmarks
        run: ./scripts/benchmark_latency.sh

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            target/criterion/
            benchmark-results/
          retention-days: 30

      - name: Compare with baseline
        if: github.event_name == 'pull_request'
        run: ./scripts/compare_performance.sh

  # Release builds and distribution
  release:
    name: Create Release
    runs-on: ubuntu-20.04
    timeout-minutes: 45
    needs: [build, test, security, performance]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: ./scripts/prepare_release.sh

      - name: Generate changelog
        run: ./scripts/generate_changelog.sh > CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to crates.io
        if: '!contains(github.ref, ''-'')'
        run: |
          cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
          ./scripts/publish_crates.sh

      - name: Prepare npm package
        run: ./scripts/prepare_npm.sh

      - name: Publish to npm
        if: '!contains(github.ref, ''-'')'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          cd npm-package && npm publish

  # Nightly performance monitoring
  nightly:
    name: Nightly Performance Monitor
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run extended performance tests
        run: cargo test --package centotype-engine --test nightly_performance -- --ignored

      - name: Run memory leak detection
        run: valgrind --tool=memcheck --leak-check=full --error-exitcode=1 target/release/centotype --test-mode

      - name: Generate performance report
        run: ./scripts/generate_perf_report.sh > nightly-performance.md

      - name: Upload nightly results
        uses: actions/upload-artifact@v4
        with:
          name: nightly-performance-${{ github.run_number }}
          path: |
            nightly-performance.md
            benchmark-results/
          retention-days: 90

      - name: Check for performance regressions
        run: ./scripts/check_regressions.sh

  # Installation validation across platforms
  install-test:
    name: Installation Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2022]

    steps:
      - name: Test GitHub Release Installation
        shell: bash
        run: |
          # Download and test the release binary
          curl -L -o centotype "https://github.com/rfxlamia/centotype/releases/latest/download/centotype-${{ runner.os }}"
          chmod +x centotype
          ./centotype --version
          ./centotype --help

      - name: Test cargo install
        run: |
          cargo install centotype
          centotype --version

      - name: Test npm install (if npm package exists)
        if: runner.os != 'Windows'
        run: |
          npm install -g centotype
          centotype --version